function die(msg) {
  alert(msg);
  throw msg;
}

function log(msg) {
  document.getElementById("log").innerHTML += msg + "<br>";
}

function sleep(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

function str2ab(str) {
  let buf = new ArrayBuffer(str.length);
  let view = new Uint8Array(buf);
  for (let i = 0; i < str.length; i++) {
    view[i] = str.charCodeAt(i);
  }
  return buf;
}

function u64(str, is_little_endian = true) {
  if (str.length != 8)
    die('string length is not 8');
  let ab = str2ab(str);
  let view = new DataView(ab);
  return view.getBigUint64(0, is_little_endian);
}

function swapEndian(n) {
  let ab = new ArrayBuffer(8);
  let view = new DataView(ab);
  view.setBigUint64(0, n, true);
  return view.getBigUint64(0, false);
}

String.prototype.hex = function () {
  let result = '';
  for (let i = 0; i < this.length; i++) {
    result += this.charCodeAt(i).toString(16);
  }
  return result;
}

BigInt.prototype.hex = function () {
  if (this < 0)
    return '-0x' + (-this).toString(16);
  else
    return '0x' + this.toString(16);
}

Number.prototype.hex = function () {
  if (this < 0)
    return '-0x' + (-this).toString(16);
  else
    return '0x' + this.toString(16);
}
